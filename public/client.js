(() => {
  // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  const messagesEl = document.getElementById("messages");
  const messageForm = document.getElementById("messageForm");
  const messageInput = document.getElementById("messageInput");
  const nameInput = document.getElementById("nameInput");
  const setNameBtn = document.getElementById("setName");
  const userListEl = document.getElementById("userList");
  const sidebar = document.getElementById("sidebar");
  const sidebarToggle = document.getElementById("sidebarToggle");
  const closeSidebar = document.getElementById("closeSidebar");
  const overlay = document.getElementById("overlay");
  const onlineCount = document.getElementById("onlineCount");
  const fileInput = document.getElementById("fileInput");
  const fileUploadBtn = document.getElementById("fileUploadBtn");
  const voiceMessageBtn = document.getElementById("voiceMessageBtn");
  const startCallBtn = document.getElementById("startCall");
  const endCallBtn = document.getElementById("endCall");
  const videoCallContainer = document.getElementById("videoCallContainer");
  const localVideo = document.getElementById("localVideo");
  const toggleVideoBtn = document.getElementById("toggleVideo");
  const toggleAudioBtn = document.getElementById("toggleAudio");
  const closeCallBtn = document.getElementById("closeCall");
  const incomingCallModal = document.getElementById("incomingCallModal");
  const callerNameEl = document.getElementById("callerName");
  const acceptCallBtn = document.getElementById("acceptCall");
  const rejectCallBtn = document.getElementById("rejectCall");
  const callStatusEl = document.getElementById("callStatus");
  const participantsCountEl = document.getElementById("participantsCount");
  const joinCallBtn = document.getElementById("joinCall");
  const voiceRecordModal = document.getElementById("voiceRecordModal");
  const voiceRecordVisualization = document.getElementById(
    "voiceRecordVisualization"
  );
  const voiceRecordTimer = document.getElementById("voiceRecordTimer");
  const stopRecordBtn = document.getElementById("stopRecordBtn");
  const cancelRecordBtn = document.getElementById("cancelRecordBtn");

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  let myId = null;
  let mySessionId = null;
  let ws = null;
  const users = new Map();
  let historyLoaded = false;
  let isConnected = false;
  let activeCalls = [];
  let activeCallsModal = null;
  let notificationPermission = false;
  let serviceWorkerRegistration = null;

  let reconnectAttempts = 0;
  const maxReconnectAttempts = 5;
  const reconnectDelay = 3000;

  // WebRTC –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  let localStream = null;
  let peerConnections = new Map();
  let currentRoomId = null;
  let isInCall = false;
  let incomingCall = null;
  let isCallInitiator = false;
  let participantsCount = 1;
  let roomUsers = new Map();

  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  let mediaRecorder = null;
  let audioChunks = [];
  let isRecording = false;
  let recordingTimer = null;
  let recordingStartTime = 0;
  let audioContext = null;
  let analyser = null;
  let visualizationBars = [];
  let visualizationInterval = null;

  // WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
  const rtcConfig = {
    iceServers: [
      { urls: "stun:stun.l.google.com:19302" },
      { urls: "stun:stun1.l.google.com:19302" },
      { urls: "stun:stun2.l.google.com:19302" },
      { urls: "stun:stun3.l.google.com:19302" },
      {
        urls: "turn:openrelay.metered.ca:80",
        username: "openrelayproject",
        credential: "openrelayproject",
      },
      {
        urls: "turn:openrelay.metered.ca:443",
        username: "openrelayproject",
        credential: "openrelayproject",
      },
      {
        urls: "turn:turn.bistri.com:80",
        username: "homeo",
        credential: "homeo",
      },
    ],
    iceCandidatePoolSize: 10,
    iceTransportPolicy: "all",
    bundlePolicy: "max-bundle",
    rtcpMuxPolicy: "require",
    iceServersProtocols: ["tcp", "udp"],
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  function init() {
    setupEventListeners();
    initializeEmojiPanel();
    initializeVoiceRecording();
    initializeNotifications();
    connectWebSocket();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  function setupEventListeners() {
    // –°–∞–π–¥–±–∞—Ä
    sidebarToggle.addEventListener("click", toggleSidebar);
    closeSidebar.addEventListener("click", toggleSidebar);
    overlay.addEventListener("click", toggleSidebar);

    // –§–æ—Ä–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    messageForm.addEventListener("submit", handleMessageSubmit);
    messageInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        handleMessageSubmit(e);
      }
    });

    if (joinCallBtn) {
      joinCallBtn.addEventListener("click", showActiveCallsModal);
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏
    setNameBtn.addEventListener("click", handleNameChange);
    nameInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") handleNameChange();
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    fileUploadBtn.addEventListener("click", () => fileInput.click());
    fileInput.addEventListener("change", handleFileUpload);

    // –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    voiceMessageBtn.addEventListener("click", startVoiceRecording);

    // –ó–≤–æ–Ω–∫–∏
    startCallBtn.addEventListener("click", startGroupCall);
    endCallBtn.addEventListener("click", endCall);
    closeCallBtn.addEventListener("click", endCall);
    toggleVideoBtn.addEventListener("click", toggleVideo);
    toggleAudioBtn.addEventListener("click", toggleAudio);

    // –í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
    acceptCallBtn.addEventListener("click", acceptCall);
    rejectCallBtn.addEventListener("click", rejectCall);

    // –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
    stopRecordBtn.addEventListener("click", stopVoiceRecording);
    cancelRecordBtn.addEventListener("click", cancelVoiceRecording);

    // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
    window.addEventListener("resize", handleResize);
    window.addEventListener("orientationchange", setVH);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.addEventListener("visibilitychange", handleVisibilityChange);
  }

  function initializeEmojiPanel() {
    const emojiPanel = document.querySelector(".emoji-panel");
    if (!emojiPanel) return;

    const emojis = [
      "üòÄ",
      "üòÇ",
      "üòç",
      "ü§î",
      "üëè",
      "üéâ",
      "‚ù§Ô∏è",
      "üî•",
      "üëç",
      "üëé",
      "üòé",
      "ü§Ø",
      "üéÇ",
      "üöÄ",
      "‚≠ê",
      "üíØ",
    ];

    emojiPanel.innerHTML = "";
    emojis.forEach((emoji) => {
      const button = document.createElement("button");
      button.textContent = emoji;
      button.type = "button";
      button.addEventListener("click", () => {
        sendMessage({ type: "reaction", emoji });
      });
      emojiPanel.appendChild(button);
    });
  }

  function initializeVoiceRecording() {
    // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–∞—Ä—ã
    voiceRecordVisualization.innerHTML = "";
    for (let i = 0; i < 40; i++) {
      const bar = document.createElement("div");
      bar.className = "voice-record-bar";
      bar.style.height = "2px";
      voiceRecordVisualization.appendChild(bar);
      visualizationBars.push(bar);
    }
  }

  function setVH() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty("--vh", `${vh}px`);
  }

  function handleResize() {
    if (window.innerWidth > 768) {
      sidebar.classList.remove("active");
      overlay.classList.remove("active");
    }
    setVH();
  }

  function toggleSidebar() {
    if (window.innerWidth <= 768) {
      sidebar.classList.toggle("active");
      overlay.classList.toggle("active");
    }
  }

  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.addEventListener("message", (event) => {
      const { action, data } = event.data;

      switch (action) {
        case "notification-click":
          handleNotificationClick(data);
          break;
        case "notification-action":
          handleNotificationAction(data);
          break;
      }
    });
  }

  function handleNotificationClick(data) {
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    window.focus();

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    scrollToBottom();
  }

  function handleNotificationAction(data) {
    const { action, notification } = data;

    switch (action) {
      case "open":
        window.focus();
        scrollToBottom();
        break;
      case "accept-call":
        if (incomingCall) {
          acceptCall();
        }
        break;
      case "reject-call":
        if (incomingCall) {
          rejectCall();
        }
        break;
      case "join-call":
        // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–≤–æ–Ω–∫—É
        if (activeCalls.length > 0) {
          joinGroupCall(activeCalls[0].roomId);
        }
        break;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification.close();
  }

  function handleVisibilityChange() {
    if (document.hidden) {
      // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (incomingCall) {
        notifyIncomingCall(incomingCall);
      }
    } else {
      // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –æ—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (serviceWorkerRegistration) {
        serviceWorkerRegistration.getNotifications().then(notifications => {
          notifications.forEach(notification => notification.close());
        });
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async function startVoiceRecording() {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 44100,
          channelCount: 1,
        },
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioContext –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      analyser = audioContext.createAnalyser();
      const source = audioContext.createMediaStreamSource(stream);
      source.connect(analyser);

      analyser.fftSize = 256;
      const bufferLength = analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MediaRecorder
      mediaRecorder = new MediaRecorder(stream, {
        mimeType: "audio/webm;codecs=opus",
      });

      audioChunks = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunks.push(event.data);
        }
      };

      mediaRecorder.onstop = handleRecordingStop;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
      mediaRecorder.start(100);
      isRecording = true;
      recordingStartTime = Date.now();

      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      voiceMessageBtn.classList.add("recording");
      voiceRecordModal.classList.remove("hidden");

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      startRecordingTimer();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
      startVisualization(dataArray, bufferLength);
    } catch (error) {
      console.error("Error starting voice recording:", error);
      showSystemMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    }
  }

  function startVisualization(dataArray, bufferLength) {
    visualizationInterval = setInterval(() => {
      if (!isRecording) return;

      analyser.getByteFrequencyData(dataArray);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      const barCount = visualizationBars.length;
      const step = Math.floor(bufferLength / barCount);

      visualizationBars.forEach((bar, index) => {
        const value = dataArray[index * step] || 0;
        const height = Math.max(2, (value / 255) * 80);
        bar.style.height = `${height}px`;
        bar.style.background = `hsl(${200 + (value / 255) * 60}, 100%, 50%)`;
      });
    }, 50);
  }

  function startRecordingTimer() {
    recordingTimer = setInterval(() => {
      if (!isRecording) return;

      const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
      const minutes = Math.floor(elapsed / 60)
        .toString()
        .padStart(2, "0");
      const seconds = (elapsed % 60).toString().padStart(2, "0");

      voiceRecordTimer.textContent = `${minutes}:${seconds}`;

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
      if (elapsed >= 120) {
        stopVoiceRecording();
      }
    }, 1000);
  }

  function stopVoiceRecording() {
    if (!isRecording || !mediaRecorder) return;

    mediaRecorder.stop();
    isRecording = false;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
    mediaRecorder.stream.getTracks().forEach((track) => track.stop());

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    clearInterval(recordingTimer);
    clearInterval(visualizationInterval);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    visualizationBars.forEach((bar) => {
      bar.style.height = "2px";
      bar.style.background = "var(--primary-red)";
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º AudioContext
    if (audioContext) {
      audioContext.close();
      audioContext = null;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    voiceRecordModal.classList.add("hidden");
    voiceMessageBtn.classList.remove("recording");
  }

 function cancelVoiceRecording() {
  if (!isRecording) return;

  mediaRecorder.stop();
  isRecording = false;

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
  mediaRecorder.stream.getTracks().forEach((track) => track.stop());

  // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  clearInterval(recordingTimer);
  clearInterval(visualizationInterval);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
  visualizationBars.forEach((bar) => {
    bar.style.height = "2px";
    bar.style.background = "var(--primary-red)";
  });

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º AudioContext
  if (audioContext) {
    audioContext.close();
    audioContext = null;
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  audioChunks = [];

  // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  voiceRecordModal.classList.add("hidden");
  voiceMessageBtn.classList.remove("recording");

  showSystemMessage("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞");
}

  async function handleRecordingStop() {
    try {
      if (audioChunks.length === 0) {
        showSystemMessage("‚ùå –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è");
        return;
      }

      const audioBlob = new Blob(audioChunks, {
        type: "audio/webm;codecs=opus",
      });
      const duration = Math.floor((Date.now() - recordingStartTime) / 1000);

      if (duration < 1) {
        showSystemMessage("‚ùå –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è");
        return;
      }

      if (duration > 120) {
        showSystemMessage("‚ùå –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã)");
        return;
      }

      showSystemMessage("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...");

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = reader.result.split(",")[1];

        sendMessage({
          type: "file",
          filename: `voice_message_${Date.now()}.ogg`,
          filetype: "audio/ogg",
          size: audioBlob.size,
          data: base64,
          duration: duration,
        });

        showSystemMessage("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
      };

      reader.readAsDataURL(audioBlob);
    } catch (error) {
      console.error("Error processing recording:", error);
      showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏");
    } finally {
      audioChunks = [];
    }
  }

  function showVoiceMessage(data, isHistory = false) {
    const el = document.createElement("div");
    el.className = `message voice-message ${data.id === myId ? "me" : ""}`;

    const time = data.ts
      ? new Date(data.ts).toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        })
      : new Date().toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        });

    el.innerHTML = `
      <div class="message-header">
        <strong>${escapeHtml(data.name)}</strong>
        <span class="message-time">${time}</span>
      </div>
      <div class="voice-player">
        <div class="voice-controls">
          <button class="play-pause-btn" data-audio="${
            data.data
          }" data-duration="${data.duration || 0}">‚ñ∂Ô∏è</button>
          <div class="voice-visualization" id="visualization_${data.ts}">
            <!-- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
          </div>
          <div class="voice-duration">${formatDuration(
            data.duration || 0
          )}</div>
        </div>
        <div class="voice-progress">
          <div class="voice-progress-bar" style="width: 0%"></div>
        </div>
      </div>
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    initializeVoiceVisualization(el, data.duration || 0);

    addMessage(el, isHistory);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const playBtn = el.querySelector(".play-pause-btn");
    playBtn.addEventListener("click", handleVoicePlayback);
  }

  function initializeVoiceVisualization(element, duration) {
    const visualization = element.querySelector(".voice-visualization");
    visualization.innerHTML = "";

    const barCount = Math.min(40, Math.floor(duration * 2));
    for (let i = 0; i < barCount; i++) {
      const bar = document.createElement("div");
      bar.className = "voice-bar";
      bar.style.height = "2px";
      bar.style.background = "var(--bg-secondary)";
      visualization.appendChild(bar);
    }
  }

  function handleVoicePlayback(event) {
    const button = event.target;
    const audioData = button.getAttribute("data-audio");
    const duration = parseInt(button.getAttribute("data-duration"));

    if (!audioData) return;

    const audio = new Audio(`data:audio/webm;base64,${audioData}`);
    const visualization = button.parentElement.querySelector(
      ".voice-visualization"
    );
    const progressBar = button.parentElement.parentElement.querySelector(
      ".voice-progress-bar"
    );
    const bars = visualization.querySelectorAll(".voice-bar");

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    document.querySelectorAll(".play-pause-btn").forEach((btn) => {
      if (btn !== button) {
        btn.textContent = "‚ñ∂Ô∏è";
        const otherAudio = btn.getAttribute("data-audio-instance");
        if (otherAudio) {
          otherAudio.pause();
          btn.removeAttribute("data-audio-instance");
        }
      }
    });

    if (button.getAttribute("data-audio-instance")) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      audio.pause();
      button.textContent = "‚ñ∂Ô∏è";
      button.removeAttribute("data-audio-instance");
      resetVisualization(bars, progressBar);
    } else {
      // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      button.textContent = "‚è∏Ô∏è";
      button.setAttribute("data-audio-instance", audio);

      audio.addEventListener("loadedmetadata", () => {
        startPlaybackVisualization(audio, bars, progressBar, duration);
      });

      audio.addEventListener("ended", () => {
        button.textContent = "‚ñ∂Ô∏è";
        button.removeAttribute("data-audio-instance");
        resetVisualization(bars, progressBar);
      });

      audio.play().catch((error) => {
        console.error("Error playing audio:", error);
        button.textContent = "‚ñ∂Ô∏è";
        button.removeAttribute("data-audio-instance");
      });
    }
  }

  function startPlaybackVisualization(audio, bars, progressBar, duration) {
    const updateVisualization = () => {
      if (audio.paused || audio.ended) return;

      const currentTime = audio.currentTime;
      const progress = (currentTime / duration) * 100;
      progressBar.style.width = `${progress}%`;

      // –ê–Ω–∏–º–∏—Ä—É–µ–º –±–∞—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      bars.forEach((bar, index) => {
        const barProgress = (index / bars.length) * 100;
        if (barProgress <= progress) {
          const intensity = Math.random() * 0.7 + 0.3;
          const height = Math.max(2, 20 * intensity);
          bar.style.height = `${height}px`;
          bar.style.background = `hsl(${200 + intensity * 60}, 100%, 50%)`;
        } else {
          bar.style.height = "2px";
          bar.style.background = "var(--bg-secondary)";
        }
      });

      requestAnimationFrame(updateVisualization);
    };

    updateVisualization();
  }

  function resetVisualization(bars, progressBar) {
    progressBar.style.width = "0%";
    bars.forEach((bar) => {
      bar.style.height = "2px";
      bar.style.background = "var(--bg-secondary)";
    });
  }

  function formatDuration(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs.toString().padStart(2, "0")}`;
  }

  function getWebSocketUrl() {
    // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –≤–∞—à backend —Å–µ—Ä–≤–µ—Ä
    if (window.location.hostname.includes('vercel.app')) {
      return "wss://aqqqqqq-2.onrender.com"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
    }
    return "ws://localhost:3000";
  }

  // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  function connectWebSocket() {
    const wsUrl = getWebSocketUrl();

    try {
      ws = new WebSocket(wsUrl);
      setupWebSocketHandlers();
    } catch (error) {
      console.error("Error creating WebSocket:", error);
      handleConnectionError();
    }
  }

  function setupWebSocketHandlers() {
    ws.onopen = () => {
      console.log("‚úÖ Connected to server");
      isConnected = true;
      reconnectAttempts = 0;
      showSystemMessage("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É");
    };

    ws.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);
        handleWebSocketMessage(message);
      } catch (error) {
        console.error("Error parsing message:", error);
      }
    };

    ws.onerror = (error) => {
      console.error("WebSocket error:", error);
      showSystemMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    };

    ws.onclose = (event) => {
      console.log("‚ùå Disconnected from server:", event.code, event.reason);
      isConnected = false;

      if (
        event.code === 4000 &&
        event.reason === "Duplicate session closed by new connection"
      ) {
        console.log(
          "üîÑ Duplicate session closed normally, no reconnection needed"
        );
        showSystemMessage(
          "üîÑ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ (–≤—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞/–≤–∫–ª–∞–¥–∫–∏)"
        );
        return;
      }

      if (event.code !== 1000 && event.code !== 4000) {
        handleReconnection();
      }
    };
  }

  function handleReconnection() {
    if (reconnectAttempts < maxReconnectAttempts) {
      reconnectAttempts++;
      const delay = reconnectDelay * reconnectAttempts;

      showSystemMessage(
        `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${
          delay / 1000
        }—Å–µ–∫... (${reconnectAttempts}/${maxReconnectAttempts})`
      );

      setTimeout(() => {
        if (!isConnected) {
          connectWebSocket();
        }
      }, delay);
    } else {
      showSystemMessage(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É."
      );
    }
  }

  function handleConnectionError() {
    showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
  function handleWebSocketMessage(message) {
    console.log("üì® Received message:", message.type, message);

    switch (message.type) {
      case "init":
        handleInitMessage(message);
        break;
      case "history":
        handleHistoryMessage(message);
        break;
      case "message":
        showMessage(message);
        notifyNewMessage(message);
        break;
      case "system":
        showSystemMessage(message.text);
        if (message.text && (message.text.includes("–≤–æ—à—ë–ª") || message.text.includes("–≤—ã—à–µ–ª"))) {
          notifySystemEvent("üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", message.text);
        }
        break;
      case "action":
        showActionMessage(message);
        break;
      case "reaction":
        showReactionMessage(message);
        break;
      case "file":
        if (message.filetype && message.filetype.startsWith("audio/")) {
          showVoiceMessage(message);
        } else {
          showFileMessage(message);
        }
        break;
      case "users":
        updateUsersList(message.users);
        break;
      case "name_updated":
        handleNameUpdated(message);
        break;
      case "private":
        handlePrivateMessage(message);
        showNotification(`üîí –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.name}`, {
          body: message.text,
          tag: "private-message",
          requireInteraction: true,
        });
        break;
      case "private_sent":
        showSystemMessage("‚úÖ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        break;
      
      // WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è
      case "call_invite":
        handleCallInvite(message);
        notifyIncomingCall(message);
        break;
      case "call_started":
        handleCallStarted(message);
        break;
      case "room_created":
        handleRoomCreated(message);
        break;
      case "room_users":
        handleRoomUsers(message);
        break;
      case "user_joined":
        handleUserJoined(message);
        break;
      case "user_left":
        handleUserLeft(message);
        break;
      case "webrtc_offer":
        handleWebRTCOffer(message);
        break;
      case "webrtc_answer":
        handleWebRTCAnswer(message);
        break;
      case "webrtc_ice_candidate":
        handleICECandidate(message);
        break;
      case "call_rejected":
        handleCallRejected(message);
        break;
      case "call_ended":
        handleCallEnded(message);
        break;
      case "group_call_started":
        handleGroupCallStarted(message);
        showNotification(`üë• ${message.fromUserName} –Ω–∞—á–∞–ª –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫`, {
          body: "–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
          tag: "group-call-started",
          actions: [
            {
              action: "join-call",
              title: "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
            },
          ],
        });
        break;
      case "group_call_ended":
        handleGroupCallEnded(message);
        break;
      case "active_calls":
        handleActiveCalls(message);
        break;

      default:
        console.log("‚ùå Unknown message type:", message);
    }
  }

  function handleInitMessage(message) {
    myId = message.id;
    mySessionId = message.sessionId;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const randomNumber = Math.floor(Math.random() * 10000);
    const autoName = `User${randomNumber}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem("chatUserName", autoName);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if (nameInput) {
      nameInput.value = autoName;
    }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  setTimeout(() => {
    if (isConnected) {
      sendMessage({ type: "setName", name: autoName });
    }
  }, 500);

  
    console.log(`‚úÖ Auto-generated name: ${autoName}`);
  }

  function handleHistoryMessage(message) {
    if (!historyLoaded && message.history) {
      message.history.forEach((msg) => {
        switch (msg.type) {
          case "message":
            showMessage(msg, true);
            break;
          case "system":
            showSystemMessage(msg.content, true);
            break;
          case "action":
            showActionMessage(msg, true);
            break;
          case "file":
            if (msg.filetype && msg.filetype.startsWith("audio/")) {
              showVoiceMessage(msg, true);
            } else {
              showFileMessage(msg, true);
            }
            break;
        }
      });
      historyLoaded = true;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  function sendMessage(message) {
    if (ws && ws.readyState === WebSocket.OPEN) {
      try {
        ws.send(JSON.stringify(message));
      } catch (error) {
        console.error("Error sending message:", error);
        showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
      }
    } else {
      showSystemMessage("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
    }
  }

  function handleMessageSubmit(e) {
    e.preventDefault();
    const text = messageInput.value.trim();
    if (text && isConnected) {
      sendMessage({ type: "message", text });
      messageInput.value = "";
      messageInput.focus();
    }
  }

  function handleNameChange() {
    const name = nameInput.value.trim();
    if (name && isConnected) {
      sendMessage({ type: "setName", name });
    }
  }

  function handleNameUpdated(message) {
    if (message.userId === myId) {
      localStorage.setItem("chatUserName", message.newName);
      showSystemMessage(`‚úÖ –¢–µ–ø–µ—Ä—å –≤–∞—Å –∑–æ–≤—É—Ç ${message.newName}`);
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  function showMessage(data, isHistory = false) {
    const el = document.createElement("div");
    el.className = `message ${data.id === myId ? "me" : ""}`;

    const time = data.ts
      ? new Date(data.ts).toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        })
      : new Date().toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        });

    el.innerHTML = `
      <div class="message-header">
        <strong>${escapeHtml(data.name)}</strong>
        <span class="message-time">${time}</span>
      </div>
      <div class="message-text">${escapeHtml(data.text)}</div>
    `;

    addMessage(el, isHistory);
  }

  function showSystemMessage(text, isHistory = false) {
    const el = document.createElement("div");
    el.className = "system";
    el.textContent = text;
    addMessage(el, isHistory);
  }

  function showActionMessage(data, isHistory = false) {
    const el = document.createElement("div");
    el.className = "action";
    el.textContent = `${data.name} ${data.text}`;
    addMessage(el, isHistory);
  }

  function showReactionMessage(data) {
    const el = document.createElement("div");
    el.className = "reaction";
    el.textContent = `${data.name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é ${data.emoji}`;
    addMessage(el);
  }

  function showFileMessage(data, isHistory = false) {
    const el = document.createElement("div");
    el.className = `message file-message ${data.id === myId ? "me" : ""}`;

    let previewHtml = "";
    if (data.filetype && data.filetype.startsWith("image/")) {
      previewHtml = `<img src="data:${data.filetype};base64,${data.data}" alt="${data.filename}" loading="lazy">`;
    } else if (data.filetype && data.filetype.startsWith("video/")) {
      previewHtml = `<video controls><source src="data:${data.filetype};base64,${data.data}" type="${data.filetype}"></video>`;
    } else if (data.filetype && data.filetype.startsWith("audio/")) {
      previewHtml = `<audio controls><source src="data:${data.filetype};base64,${data.data}" type="${data.filetype}"></audio>`;
    } else {
      previewHtml = `<div class="file-icon">üìÑ ${data.filename}</div>`;
    }

    const time = data.ts
      ? new Date(data.ts).toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        })
      : new Date().toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        });

    el.innerHTML = `
      <div class="message-header">
        <strong>${escapeHtml(data.name)}</strong>
        <span class="message-time">${time}</span>
      </div>
      <div class="file-preview">
        ${previewHtml}
        <div class="file-info">
          <div class="file-name">${escapeHtml(data.filename)}</div>
          <div class="file-size">${formatFileSize(data.size)}</div>
          <button class="download-btn" onclick="downloadFile('${
            data.filename
          }', '${data.filetype}', '${data.data}')">
            –°–∫–∞—á–∞—Ç—å
          </button>
        </div>
      </div>
    `;

    addMessage(el, isHistory);
  }

  function addMessage(element, isHistory = false) {
    if (!messagesEl) return;

    if (isHistory) {
      messagesEl.insertBefore(element, messagesEl.firstChild);
    } else {
      messagesEl.appendChild(element);
      scrollToBottom();
    }
  }

  function scrollToBottom() {
    if (messagesEl) {
      messagesEl.scrollTop = messagesEl.scrollHeight;
    }
  }

  async function initializeNotifications() {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if ("Notification" in window) {
        const permission = await Notification.requestPermission();
        notificationPermission = permission === "granted";

        if (notificationPermission) {
          console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã");
        } else {
          console.log("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã");
        }
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä
      if ("serviceWorker" in navigator) {
        try {
          const registration = await navigator.serviceWorker.register("/sw.js");
          serviceWorkerRegistration = registration;
          console.log("‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        } catch (error) {
          console.warn("‚ö†Ô∏è Service Worker –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", error);
        }
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  function showNotification(title, options = {}) {
    if (!notificationPermission) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.hidden) {
      if ("serviceWorker" in navigator && serviceWorkerRegistration) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        serviceWorkerRegistration.showNotification(title, {
          icon: "/favicon.ico",
          badge: "/favicon.ico",
          vibrate: [200, 100, 200],
          ...options,
        });
      } else if ("Notification" in window) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        new Notification(title, {
          icon: "/favicon.ico",
          ...options,
        });
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  function notifyNewMessage(message) {
    showNotification(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.name}`, {
      body: message.text || "üìé –í–ª–æ–∂–µ–Ω–∏–µ",
      tag: "new-message",
      requireInteraction: true,
      actions: [
        {
          action: "open",
          title: "üìñ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç",
        },
        {
          action: "close",
          title: "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        },
      ],
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
  function notifyIncomingCall(callInfo) {
    showNotification(`–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${callInfo.fromUserName}`, {
      body: callInfo.isGroupCall
        ? "üë• –ì—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫"
        : "üìû –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫",
      tag: "incoming-call",
      requireInteraction: true,
      vibrate: [500, 200, 500, 200, 500],
      actions: [
        {
          action: "accept-call",
          title: "üìû –ü—Ä–∏–Ω—è—Ç—å",
        },
        {
          action: "reject-call",
          title: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        },
      ],
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
  function notifySystemEvent(title, body) {
    showNotification(title, {
      body: body,
      tag: "system-event",
    });
  }

  function escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return "0 B";
    const k = 1024;
    const sizes = ["B", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }

  // –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  function updateUsersList(usersList) {
    if (!userListEl) return;

    userListEl.innerHTML = "";
    if (onlineCount) {
      onlineCount.textContent = `–û–Ω–ª–∞–π–Ω: ${usersList.length}`;
    }

    users.clear();
    usersList.forEach((user) => {
      users.set(user.id, user);

      const userEl = document.createElement("li");
      userEl.className = `user-item ${user.id === myId ? "me" : ""}`;

      let userHtml = `
        <span class="user-status online"></span>
        <span class="user-name">${escapeHtml(user.name)}</span>
        ${user.id === myId ? '<span class="you-badge">(–í—ã)</span>' : ""}
      `;

      if (user.id !== myId) {
        userHtml += `<button class="call-user-btn" title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å">üìû</button>`;
      }

      userEl.innerHTML = userHtml;

      if (user.id !== myId) {
        const callBtn = userEl.querySelector(".call-user-btn");
        if (callBtn) {
          callBtn.addEventListener("click", (e) => {
            e.stopPropagation();
            startIndividualCall(user.id);
          });
        }

        userEl.addEventListener("click", () => {
          const text = prompt(`–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${user.name}:`);
          if (text && text.trim()) {
            sendMessage({ type: "private", to: user.id, text: text.trim() });
          }
        });
      }

      userListEl.appendChild(userEl);
    });

    if (!isInCall) {
      const joinCallItem = document.createElement("li");
      joinCallItem.className = "user-item join-call-item";
      joinCallItem.innerHTML = `
      <span class="user-status" style="background: #f59e0b"></span>
      <span class="user-name">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–≤–æ–Ω–∫—É</span>
      <button class="call-user-btn" style="background: #f59e0b">üë•</button>
    `;

      const joinBtn = joinCallItem.querySelector(".call-user-btn");
      joinBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        showActiveCallsModal();
      });

      joinCallItem.addEventListener("click", () => {
        showActiveCallsModal();
      });

      userListEl.appendChild(joinCallItem);
    }
  }

  function showActiveCallsModal() {
    if (!activeCallsModal) {
      activeCallsModal = document.createElement("div");
      activeCallsModal.className = "modal";
      activeCallsModal.innerHTML = `
      <div class="modal-content">
        <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏</h3>
        <div id="activeCallsList" style="max-height: 300px; overflow-y: auto; margin: 16px 0;">
          <div class="system">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
        <div class="modal-buttons">
          <button id="refreshCalls" class="accept-btn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
          <button id="closeCallsModal" class="reject-btn">‚úï –ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    `;
      document.body.appendChild(activeCallsModal);

      document
        .getElementById("refreshCalls")
        .addEventListener("click", refreshActiveCalls);
      document
        .getElementById("closeCallsModal")
        .addEventListener("click", hideActiveCallsModal);
    }

    activeCallsModal.classList.remove("hidden");
    refreshActiveCalls();
  }

  function hideActiveCallsModal() {
    if (activeCallsModal) {
      activeCallsModal.classList.add("hidden");
    }
  }

  function refreshActiveCalls() {
    sendMessage({ type: "get_active_calls" });
  }

  async function processPendingIceCandidates(pc, sessionId) {
    if (!pc.pendingIceCandidates || pc.pendingIceCandidates.length === 0) {
      return;
    }

    console.log(
      `üîÑ Processing ${pc.pendingIceCandidates.length} pending ICE candidates for ${sessionId}`
    );

    while (pc.pendingIceCandidates.length > 0) {
      const candidate = pc.pendingIceCandidates.shift();
      try {
        await pc.addIceCandidate(candidate);
        console.log(`üßä Added pending ICE candidate from ${sessionId}`);
      } catch (error) {
        console.warn("‚ö†Ô∏è Error adding pending ICE candidate:", error);
      }
    }
  }

  async function joinGroupCall(roomId) {
    if (isInCall) {
      showSystemMessage("‚ùå –í—ã —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ");
      return;
    }

    hideActiveCallsModal();
    showSystemMessage("üé• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");

    try {
      await initializeLocalStream();

      currentRoomId = roomId;
      isInCall = true;
      isCallInitiator = false;

      sendMessage({ type: "join_group_call", roomId: roomId });
      showVideoCallUI();
      showSystemMessage("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–≤–æ–Ω–∫—É");
    } catch (error) {
      console.error("Error joining group call:", error);
      showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É");
    }
  }

  function handleActiveCalls(message) {
    activeCalls = message.calls;

    const callsList = document.getElementById("activeCallsList");
    if (!callsList) return;

    if (activeCalls.length === 0) {
      callsList.innerHTML =
        '<div class="system">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤</div>';
      return;
    }

    callsList.innerHTML = "";
    activeCalls.forEach((call) => {
      const callEl = document.createElement("div");
      callEl.className = "user-item";
      callEl.style.marginBottom = "8px";
      callEl.style.cursor = "pointer";
      callEl.style.padding = "12px";
      callEl.style.borderRadius = "8px";
      callEl.style.border = "1px solid var(--border-color)";

      callEl.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
        <div>
          <div style="font-weight: 500;">–ó–≤–æ–Ω–æ–∫ –æ—Ç ${escapeHtml(
            call.creatorName
          )}</div>
          <div style="font-size: 12px; color: var(--text-muted);">
            –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${call.participantsCount} ‚Ä¢ 
            ${new Date(call.createdAt).toLocaleTimeString("ru-RU", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </div>
        </div>
        <button class="call-user-btn" style="background: #10b981;">‚ûï</button>
      </div>
    `;

      const joinBtn = callEl.querySelector(".call-user-btn");
      joinBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        joinGroupCall(call.roomId);
      });

      callEl.addEventListener("click", () => {
        joinGroupCall(call.roomId);
      });

      callsList.appendChild(callEl);
    });
  }

  function handleGroupCallStarted(message) {
    if (isInCall) return;

    showSystemMessage(`üë• ${message.fromUserName} –Ω–∞—á–∞–ª –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫`);

    if (!document.querySelector(".quick-join-call")) {
      const quickJoin = document.createElement("div");
      quickJoin.className = "system quick-join-call";
      quickJoin.innerHTML = `
      <div style="display: flex; align-items: center; justify-content: center; gap: 8px;">
        ${message.fromUserName} –Ω–∞—á–∞–ª –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫
        <button style="background: var(--primary-blue); color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;">
          –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        </button>
      </div>
    `;

      const joinBtn = quickJoin.querySelector("button");
      joinBtn.addEventListener("click", () => {
        joinGroupCall(message.roomId);
        quickJoin.remove();
      });

      addMessage(quickJoin);
    }
  }

  function handleGroupCallEnded(message) {
    showSystemMessage(
      `üìû –ì—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω ${
        message.endedBy ? `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${message.endedBy}` : ""
      }`
    );

    document.querySelectorAll(".quick-join-call").forEach((el) => el.remove());
  }

  function handlePrivateMessage(data) {
    const el = document.createElement("div");
    el.className = "private";

    el.innerHTML = `
      <div class="message-header">
        <strong>üîí –õ–° –æ—Ç ${escapeHtml(data.name)}</strong>
        <span class="message-time">${new Date().toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        })}</span>
      </div>
      <div class="message-text">${escapeHtml(data.text)}</div>
    `;

    addMessage(el);

    if (
      document.hidden &&
      "Notification" in window &&
      Notification.permission === "granted"
    ) {
      new Notification(`–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${data.name}`, {
        body: data.text,
        icon: "/favicon.ico",
      });
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    if (file.size > 10 * 1024 * 1024) {
      showSystemMessage("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)");
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const base64 = e.target.result.split(",")[1];
      sendMessage({
        type: "file",
        filename: file.name,
        filetype: file.type,
        size: file.size,
        data: base64,
      });
    };
    reader.onerror = () => {
      showSystemMessage("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞");
    };
    reader.readAsDataURL(file);
    fileInput.value = "";
  }

  // WebRTC —Ñ—É–Ω–∫—Ü–∏–∏
  async function startGroupCall() {
    if (isInCall) {
      showSystemMessage("‚ùå –í—ã —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ");
      return;
    }

    try {
      showSystemMessage("üé• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");
      await initializeLocalStream();
      isCallInitiator = true;
      sendMessage({ type: "create_room" });
      showSystemMessage("üë• –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫...");
    } catch (error) {
      console.error("Error starting group call:", error);
      showSystemMessage(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–º–µ—Ä—ã/–º–∏–∫—Ä–æ—Ñ–æ–Ω–∞."
      );
    }
  }

  function startIndividualCall(targetUserId) {
    if (isInCall) {
      showSystemMessage("‚ùå –í—ã —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ");
      return;
    }

    isCallInitiator = true;
    sendMessage({ type: "start_individual_call", targetUserId });
    showSystemMessage("üìû –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
  }

  async function initializeLocalStream() {
    try {
      if (localStream) {
        localStream.getTracks().forEach((track) => track.stop());
      }

      localStream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 640 },
          height: { ideal: 480 },
          frameRate: { ideal: 24 },
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
        },
      });

      if (localVideo) {
        localVideo.srcObject = localStream;
        console.log("‚úÖ Local video stream initialized");
      }

      return localStream;
    } catch (error) {
      console.error("‚ùå Error accessing media devices:", error);

      try {
        localStream = await navigator.mediaDevices.getUserMedia({
          audio: true,
          video: false,
        });

        if (localVideo) {
          localVideo.srcObject = null;
        }

        console.log("‚úÖ Audio-only stream initialized");
        return localStream;
      } catch (audioError) {
        console.error("‚ùå Error accessing audio devices:", audioError);
        showSystemMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
        throw error;
      }
    }
  }

  function handleCallInvite(message) {
    if (isInCall) {
      sendMessage({ type: "call_rejected", roomId: message.roomId });
      return;
    }

    incomingCall = message;
    callerNameEl.textContent = `${message.fromUserName} (${
      message.isGroupCall ? "–ì—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫" : "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
    })`;
    incomingCallModal.classList.remove("hidden");

    setTimeout(() => {
      if (
        incomingCallModal &&
        !incomingCallModal.classList.contains("hidden")
      ) {
        rejectCall();
      }
    }, 30000);
  }

  function handleCallStarted(message) {
    console.log("üìû Call started received:", message);

    currentRoomId = message.roomId;
    isInCall = true;
    showSystemMessage(`üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç —Å ${message.targetUserName}`);
  }

  function handleRoomCreated(message) {
    currentRoomId = message.roomId;
    isInCall = true;
    showVideoCallUI();
    showSystemMessage(message.message || "‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞");

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏
    if (!localStream) {
      initializeLocalStream()
        .then(() => {
          console.log("‚úÖ Local stream initialized for room creator");
        })
        .catch((error) => {
          console.error("‚ùå Failed to initialize local stream:", error);
          showSystemMessage(
            "‚ö†Ô∏è –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É"
          );
        });
    }

    if (!localStream) {
      initializeLocalStream()
        .then(() => {
          console.log("‚úÖ Local stream initialized for room creator");
        })
        .catch((error) => {
          console.error("‚ùå Failed to initialize local stream:", error);
          showSystemMessage(
            "‚ö†Ô∏è –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É"
          );
        });
    }

    setTimeout(() => {
      updateRoomUsers();
    }, 1000);
  }

  async function acceptCall() {
    if (!incomingCall) return;

    try {
      showSystemMessage("üé• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");
      await initializeLocalStream();
      currentRoomId = incomingCall.roomId;
      isInCall = true;
      isCallInitiator = false;

      sendMessage({ type: "join_room", roomId: incomingCall.roomId });
      hideIncomingCallModal();
      showVideoCallUI();
      showSystemMessage("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∑–≤–æ–Ω–∫—É");

      setTimeout(() => {
        updateRoomUsers();
      }, 1000);
    } catch (error) {
      console.error("Error accepting call:", error);
      showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É");
      hideIncomingCallModal();
    }
  }

  function rejectCall() {
    if (incomingCall) {
      sendMessage({ type: "call_rejected", roomId: incomingCall.roomId });
      hideIncomingCallModal();
      showSystemMessage("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–≤–æ–Ω–æ–∫");
    }
  }

  function hideIncomingCallModal() {
    incomingCallModal.classList.add("hidden");
    incomingCall = null;
  }

  function handleCallRejected(message) {
    showSystemMessage(
      `‚ùå ${message.userName || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫`
    );
    endCall();
  }

  function handleCallEnded(message) {
    showSystemMessage(
      `üìû ${
        message.endedBy
          ? `–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${message.endedBy}`
          : "–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"
      }`
    );
    endCall();
  }

  // WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï
  async function createPeerConnection(targetSessionId) {
    console.log(`üîó Creating peer connection for: ${targetSessionId}`);

    try {
      const pc = new RTCPeerConnection(rtcConfig);

      pc.pendingIceCandidates = [];

      
      pc.ontrack = (event) => {
        console.log(
          "üìπ Received remote track from:",
          targetSessionId,
          event.streams
        );
        if (event.streams && event.streams[0]) {
          showRemoteVideo(targetSessionId, event.streams[0]);
        }
      };

      pc.onicecandidate = (event) => {
        if (event.candidate && currentRoomId) {
          console.log(`üßä Sending ICE candidate to ${targetSessionId}`);
          sendMessage({
            type: "webrtc_ice_candidate",
            roomId: currentRoomId,
            targetSessionId: targetSessionId,
            candidate: event.candidate,
          });
        } else if (!event.candidate) {
          console.log(`‚úÖ All ICE candidates gathered for ${targetSessionId}`);
        }
      };

      if (localStream) {
        localStream.getTracks().forEach((track) => {
          try {
            pc.addTrack(track, localStream);
            console.log(
              `‚úÖ Added local track to connection with ${targetSessionId}`
            );
          } catch (error) {
            console.error("Error adding track:", error);
          }
        });
      }

      peerConnections.set(targetSessionId, pc);
      return pc;
    } catch (error) {
      console.error(
        `‚ùå Error creating peer connection for ${targetSessionId}:`,
        error
      );
      throw error;
    }
  }

  function showRemoteVideo(sessionId, remoteStream) {
    const remoteVideoId = `remoteVideo_${sessionId}`;
    let remoteVideo = document.getElementById(remoteVideoId);
    let videoContainer = document.getElementById(`videoContainer_${sessionId}`);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if (!videoContainer) {
      videoContainer = document.createElement("div");
      videoContainer.className = "video-container";
      videoContainer.id = `videoContainer_${sessionId}`;

      remoteVideo = document.createElement("video");
      remoteVideo.id = remoteVideoId;
      remoteVideo.autoplay = true;
      remoteVideo.playsInline = true;
      remoteVideo.className = "remote-video";
      remoteVideo.muted = false;

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ
      remoteVideo.onerror = (e) => {
        console.error(`‚ùå Video error for ${sessionId}:`, e);
      };

      remoteVideo.onloadedmetadata = () => {
        console.log(`‚úÖ Video loaded for ${sessionId}`);
        remoteVideo
          .play()
          .catch((e) => console.log(`‚ö†Ô∏è Auto-play prevented for ${sessionId}`));
      };

      const videoLabel = document.createElement("div");
      videoLabel.className = "video-label";

      const userName = roomUsers.get(sessionId)?.userName || "–£—á–∞—Å—Ç–Ω–∏–∫";
      videoLabel.textContent = userName;

      videoContainer.appendChild(remoteVideo);
      videoContainer.appendChild(videoLabel);

      const videoGrid = document.querySelector(".video-grid");
      if (videoGrid) {
        videoGrid.appendChild(videoContainer);
      }
    }

    if (remoteVideo) {
      try {
        remoteVideo.srcObject = remoteStream;
        console.log(`‚úÖ Remote video stream set for ${sessionId}`);
      } catch (error) {
        console.error(`‚ùå Error setting remote video for ${sessionId}:`, error);
      }
    }

    setTimeout(updateVideoGridLayout, 100);
  }

  async function createOffer(targetSessionId, attempt = 1) {
    console.log(
      `üì§ Creating offer for: ${targetSessionId} (attempt ${attempt})`
    );

    if (peerConnections.has(targetSessionId)) {
      const existingPc = peerConnections.get(targetSessionId);
      if (existingPc.signalingState === "have-local-offer") {
        console.log(`‚è≥ Already creating offer for ${targetSessionId}, waiting...`);
        return;
      }
      
      if (existingPc.signalingState === "stable" || existingPc.connectionState === "connected") {
        console.log(`‚úÖ Already connected to ${targetSessionId}`);
        return;
      }
    }

    if (peerConnections.has(targetSessionId)) {
        const oldPc = peerConnections.get(targetSessionId);
        if (oldPc.signalingState === "closed" || oldPc.connectionState === "failed") {
          try { oldPc.close(); } catch (e) {}
          peerConnections.delete(targetSessionId);
        }
      }

    try {
      const pc = await createPeerConnection(targetSessionId);

      // –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º offer
      await new Promise(resolve => setTimeout(resolve, 300));

      const offer = await pc.createOffer({
        offerToReceiveAudio: true,
        offerToReceiveVideo: true,
      });

      await pc.setLocalDescription(offer);
      console.log(
        `‚úÖ Local description set for ${targetSessionId}, state: ${pc.signalingState}`
      );

      sendMessage({
        type: "webrtc_offer",
        roomId: currentRoomId,
        targetSessionId: targetSessionId,
        offer: offer,
      });

      console.log(`‚úÖ Offer sent to ${targetSessionId}`);
    } catch (error) {
      console.error("‚ùå Error creating offer:", error);

      if (peerConnections.has(targetSessionId)) {
        peerConnections.get(targetSessionId).close();
        peerConnections.delete(targetSessionId);
      }

      if (attempt < 3) {
        const delay = Math.min(2000 * Math.pow(2, attempt - 1), 5000);
        console.log(
          `üîÑ Retrying offer creation for ${targetSessionId} in ${delay}ms...`
        );
        setTimeout(() => createOffer(targetSessionId, attempt + 1), delay);
      } else {
        console.error(
          `‚ùå Failed to create offer for ${targetSessionId} after ${attempt} attempts`
        );
      }
    }
  }

  function handleUserJoined(message) {
    console.log(`üë§ User ${message.userName} joined the call`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
    if (!roomUsers.has(message.sessionId)) {
      roomUsers.set(message.sessionId, {
        userId: message.userId,
        userName: message.userName,
        sessionId: message.sessionId,
      });

      updateParticipantsCount(roomUsers.size);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (isInCall && message.sessionId !== mySessionId && !peerConnections.has(message.sessionId)) {
        console.log(`üîó Creating connection with new user: ${message.userName}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        const shouldCreateOffer = mySessionId < message.sessionId;
        
        if (shouldCreateOffer) {
          setTimeout(() => {
            createOffer(message.sessionId);
          }, 1000);
        }
      }
    }
  }

  async function handleRoomUsers(message) {
    console.log("üë• Room users received:", message.users);

    roomUsers.clear();
    message.users.forEach((user) => {
      roomUsers.set(user.sessionId, user);
    });

    updateParticipantsCount(message.users.length);
    setTimeout(updateVideoGridLayout, 100);

    const otherUsers = message.users.filter(
      (user) => user.sessionId !== mySessionId
    );

    console.log(`üîó Need to connect to ${otherUsers.length} other users`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å offer
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –º–µ–Ω—å—à–∏–º sessionId —Å–æ–∑–¥–∞–µ—Ç offer
    const shouldCreateOffer = mySessionId < otherUsers[0]?.sessionId;

    for (let i = 0; i < otherUsers.length; i++) {
      const user = otherUsers[i];

      if (!peerConnections.has(user.sessionId)) {
        console.log(
          `üîó Setting up connection with: ${user.userName} (${user.sessionId})`
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await new Promise((resolve) => setTimeout(resolve, 1000 + i * 500));

        try {
          if (shouldCreateOffer) {
            await createOffer(user.sessionId);
            console.log(`‚úÖ Created offer for ${user.userName}`);
          } else {
            console.log(`‚è≥ Waiting for offer from ${user.userName}`);
            // –ë—É–¥–µ–º –∂–¥–∞—Ç—å offer –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          }
        } catch (error) {
          console.error(
            `‚ùå Failed to setup connection with ${user.userName}:`,
            error
          );
        }
      }
    }
  }

  async function createPeerConnection(targetSessionId) {
    console.log(`üîó Creating peer connection for: ${targetSessionId}`);

    try {
      const pc = new RTCPeerConnection(rtcConfig);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      pc.pendingIceCandidates = [];

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
      pc.ontrack = (event) => {
        console.log(
          "üìπ Received remote track from:",
          targetSessionId,
          event.streams
        );
        if (event.streams && event.streams[0]) {
          showRemoteVideo(targetSessionId, event.streams[0]);
        }
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      pc.onicecandidate = (event) => {
        if (event.candidate && currentRoomId) {
          console.log(`üßä Sending ICE candidate to ${targetSessionId}`);
          sendMessage({
            type: "webrtc_ice_candidate",
            roomId: currentRoomId,
            targetSessionId: targetSessionId,
            candidate: event.candidate,
          });
        } else if (!event.candidate) {
          console.log(`‚úÖ All ICE candidates gathered for ${targetSessionId}`);
        }
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      pc.onconnectionstatechange = () => {
        console.log(
          `üîó Connection state for ${targetSessionId}: ${pc.connectionState}`
        );

        if (pc.connectionState === "connected") {
          console.log(`‚úÖ Successfully connected to ${targetSessionId}`);
          updateCallStatus("connected");

          // –û—á–∏—â–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
          if (pc.pendingIceCandidates) {
            pc.pendingIceCandidates = [];
          }
        } else if (pc.connectionState === "failed") {
          console.warn(`‚ùå Connection failed with ${targetSessionId}`);
        } else if (pc.connectionState === "closed") {
          console.log(`üîí Connection closed with ${targetSessionId}`);
        }
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      pc.oniceconnectionstatechange = () => {
        console.log(
          `üßä ICE connection state for ${targetSessionId}: ${pc.iceConnectionState}`
        );

        if (pc.iceConnectionState === "connected") {
          console.log(`‚úÖ ICE connected to ${targetSessionId}`);
        } else if (pc.iceConnectionState === "failed") {
          console.warn(`‚ùå ICE failed with ${targetSessionId}`);
        }
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
      pc.onsignalingstatechange = () => {
        console.log(
          `üì° Signaling state for ${targetSessionId}: ${pc.signalingState}`
        );

        // –ö–æ–≥–¥–∞ signaling state —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è stable, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        if (pc.signalingState === "stable" && pc.remoteDescription) {
          processPendingIceCandidates(pc, targetSessionId);
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
      if (localStream) {
        localStream.getTracks().forEach((track) => {
          try {
            pc.addTrack(track, localStream);
            console.log(
              `‚úÖ Added local track to connection with ${targetSessionId}`
            );
          } catch (error) {
            console.error("Error adding track:", error);
          }
        });
      }

      peerConnections.set(targetSessionId, pc);
      return pc;
    } catch (error) {
      console.error(
        `‚ùå Error creating peer connection for ${targetSessionId}:`,
        error
      );
      throw error;
    }
  }

  function cleanupPendingCandidates(sessionId) {
    const pc = peerConnections.get(sessionId);
    if (pc && pc.pendingIceCandidates) {
      console.log(
        `üßπ Cleaning up ${pc.pendingIceCandidates.length} pending ICE candidates for ${sessionId}`
      );
      pc.pendingIceCandidates = [];
    }
  }

  function debugConnections() {
    console.log("üîç DEBUG CONNECTIONS:");
    console.log(`Room Users: ${roomUsers.size}`);
    roomUsers.forEach((user, sessionId) => {
      console.log(
        `- ${user.userName} (${sessionId}) ${
          sessionId === mySessionId ? "(You)" : ""
        }`
      );
    });

    console.log(`Peer Connections: ${peerConnections.size}`);
    peerConnections.forEach((pc, sessionId) => {
      console.log(
        `- ${sessionId}: ${pc.connectionState} (ICE: ${pc.iceConnectionState})`
      );
    });

    console.log(
      `Video Elements: ${document.querySelectorAll(".video-container").length}`
    );
  }

  // –í—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

  function updateVideoGridLayout() {
    const videoGrid = document.querySelector(".video-grid");
    if (!videoGrid) return;
    const count = videoGrid.querySelectorAll(".video-container").length;
    if (count <= 1) {
      videoGrid.style.gridTemplateColumns = "1fr";
    } else if (count === 2) {
      videoGrid.style.gridTemplateColumns = "1fr 1fr";
    } else if (count <= 4) {
      videoGrid.style.gridTemplateColumns = "1fr 1fr";
    } else {
      videoGrid.style.gridTemplateColumns = "1fr 1fr 1fr";
    }
  }

  function restartConnection(sessionId) {
    try {
      const pc = peerConnections.get(sessionId);
      if (pc) {
        try { pc.close(); } catch (e) {}
        peerConnections.delete(sessionId);
      }
      if (currentRoomId) {
        createOffer(sessionId);
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è Failed to restart connection:", e);
    }
  }

  function refreshAllConnections() {
    console.log("üîÑ Refreshing all peer connections...");

    const disconnectedConnections = Array.from(
      peerConnections.entries()
    ).filter(
      ([sessionId, pc]) =>
        pc.connectionState !== "connected" &&
        pc.connectionState !== "connecting"
    );

    console.log(
      `üë• Participants count updated: ${displayCount} (actual: ${count})`
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    disconnectedConnections.forEach(async ([sessionId], index) => {
      await new Promise((resolve) => setTimeout(resolve, index * 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º
      if (currentRoomId && peerConnections.has(sessionId)) {
        createOffer(sessionId);
      }
    });
  }

  // –£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  // setInterval(() => {
  //   if (isInCall && peerConnections.size > 0) {
  //     let disconnectedCount = 0;
  //     peerConnections.forEach((pc, sessionId) => {
  //       if (
  //         pc.connectionState !== "connected" &&
  //         pc.connectionState !== "connecting"
  //       ) {
  //         disconnectedCount++;
  //         console.log(
  //           `‚ö†Ô∏è Connection with ${sessionId} is ${pc.connectionState}`
  //         );
  //       }
  //     });

  //     if (disconnectedCount > 0 && disconnectedCount <= 4) {
  //       // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  //       console.log(`üîÑ ${disconnectedCount} connections need refresh`);
  //       refreshAllConnections();
  //     }
  //   }
  // }, 30000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥

  async function handleRoomUsers(message) {
    console.log("üë• Room users received:", message.users);

    roomUsers.clear();
    message.users.forEach((user) => {
      roomUsers.set(user.sessionId, user);
    });

    updateParticipantsCount(message.users.length);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É —Å–µ—Ç–∫–∏
    setTimeout(updateVideoGridLayout, 100);

    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const otherUsers = message.users.filter(
      (user) => user.sessionId !== mySessionId
    );

    console.log(`üîó Need to connect to ${otherUsers.length} other users`);

    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < otherUsers.length; i++) {
      const user = otherUsers[i];

      if (!peerConnections.has(user.sessionId)) {
        console.log(
          `üîó Setting up connection with: ${user.userName} (${user.sessionId})`
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await new Promise((resolve) => setTimeout(resolve, 1000 + i * 500));

        try {
          await createOffer(user.sessionId);
          console.log(`‚úÖ Connection setup initiated for ${user.userName}`);
        } catch (error) {
          console.error(
            `‚ùå Failed to setup connection with ${user.userName}:`,
            error
          );
        }
      }
    }
  }

  async function handleWebRTCOffer(message) {
    try {
      console.log(`üì• Received WebRTC offer from: ${message.fromSessionId}`);

      if (peerConnections.has(message.fromSessionId)) {
        const existingPc = peerConnections.get(message.fromSessionId);
        if (existingPc.signalingState === "have-local-offer") {
          console.log(
            `üîÑ Offer conflict detected with ${message.fromSessionId}, closing our offer`
          );
          existingPc.close();
          peerConnections.delete(message.fromSessionId);
        }
      }

      if (peerConnections.has(message.fromSessionId)) {
        const existingPc = peerConnections.get(message.fromSessionId);
        if (existingPc.connectionState === "connected") {
          console.log(
            `‚úÖ Already connected to ${message.fromSessionId}, ignoring duplicate offer`
          );
          return;
        }
      }

      const pc = await createPeerConnection(message.fromSessionId);

      await pc.setRemoteDescription(new RTCSessionDescription(message.offer));
      console.log(`‚úÖ Remote description set, state: ${pc.signalingState}`);

      await processPendingIceCandidates(pc, message.fromSessionId);

      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);

      sendMessage({
        type: "webrtc_answer",
        roomId: message.roomId,
        targetSessionId: message.fromSessionId,
        answer: answer,
      });

      console.log(`‚úÖ Answer created and sent to ${message.fromSessionId}`);
    } catch (error) {
      console.error("‚ùå Error handling WebRTC offer:", error);

      if (message.fromSessionId && peerConnections.has(message.fromSessionId)) {
        peerConnections.get(message.fromSessionId).close();
        peerConnections.delete(message.fromSessionId);
      }
    }
  }

  async function handleWebRTCAnswer(message) {
    try {
      console.log(`üì• Received WebRTC answer from: ${message.fromSessionId}`);

      const pc = peerConnections.get(message.fromSessionId);
      if (!pc) {
        console.warn(
          `‚ùå No peer connection found for ${message.fromSessionId}`
        );
        return;
      }

      console.log(`üì° Current signaling state: ${pc.signalingState}`);

      if (pc.signalingState === "stable") {
        console.log(
          `‚úÖ Connection already stable with ${message.fromSessionId}, ignoring duplicate answer`
        );
        return;
      }

      if (pc.signalingState !== "have-local-offer") {
        console.warn(`‚ö†Ô∏è Wrong signaling state for answer: ${pc.signalingState}, expected have-local-offer`);
        
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (pc.signalingState === "closed" || pc.connectionState === "failed") {
          console.log(`üîÑ Recreating connection with ${message.fromSessionId}`);
          peerConnections.delete(message.fromSessionId);
          setTimeout(() => createOffer(message.fromSessionId), 1000);
        }
        return;
      }

      await pc.setRemoteDescription(new RTCSessionDescription(message.answer));
      console.log(
        `‚úÖ Remote description set for ${message.fromSessionId}, signaling state: ${pc.signalingState}`
      );

      await processPendingIceCandidates(pc, message.fromSessionId);
    } catch (error) {
      console.error("‚ùå Error handling WebRTC answer:", error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.toString().includes("wrong state: stable")) {
        console.log(
          `‚úÖ Answer already processed for ${message.fromSessionId}, connection is stable`
        );
        return;
      }

      if (
        error.toString().includes("closed") ||
        error.toString().includes("failed")
      ) {
        console.log(
          `üîÑ Connection with ${message.fromSessionId} is closed/failed, will recreate`
        );
        if (peerConnections.has(message.fromSessionId)) {
          peerConnections.get(message.fromSessionId).close();
          peerConnections.delete(message.fromSessionId);
        }
        setTimeout(() => createOffer(message.fromSessionId), 2000);
      }
    }
  }

  async function handleICECandidate(message) {
    try {
      const pc = peerConnections.get(message.fromSessionId);
      if (!pc) {
        console.warn(
          `‚ùå No peer connection for ICE candidate from ${message.fromSessionId}`
        );
        return;
      }

      if (pc.signalingState === "closed" || pc.connectionState === "closed") {
        console.warn(
          `‚ö†Ô∏è Connection closed for ${message.fromSessionId}, ignoring ICE candidate`
        );
        return;
      }

      // –ï—Å–ª–∏ remote description –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
      if (!pc.remoteDescription) {
        console.log(
          `‚è≥ Queueing ICE candidate - waiting for remote description from ${message.fromSessionId}`
        );

        if (!pc.pendingIceCandidates) {
          pc.pendingIceCandidates = [];
        }
        pc.pendingIceCandidates.push(new RTCIceCandidate(message.candidate));
        return;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç
      await pc.addIceCandidate(new RTCIceCandidate(message.candidate));
      console.log(`üßä ICE candidate added from ${message.fromSessionId}`);
    } catch (error) {
      console.error("‚ùå Error handling ICE candidate:", error);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
  }

  function handleUserLeft(message) {
    console.log(`üë§ User ${message.userName} left the call`);
    
    roomUsers.delete(message.sessionId);

    if (peerConnections.has(message.sessionId)) {
      peerConnections.get(message.sessionId).close();
      peerConnections.delete(message.sessionId);
    }

    removeVideoElement(message.sessionId);
    updateParticipantsCount(roomUsers.size);
    
    showSystemMessage(`üë§ ${message.userName} –ø–æ–∫–∏–Ω—É–ª –∑–≤–æ–Ω–æ–∫`);
  }

  function removeVideoElement(sessionId) {
    const videoContainer = document.getElementById(
      `videoContainer_${sessionId}`
    );
    if (videoContainer) {
      videoContainer.remove();
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É —Å–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      setTimeout(updateVideoGridLayout, 100);
    }
  }

  function updateRoomUsers() {
    if (currentRoomId) {
      sendMessage({
        type: "get_room_users",
        roomId: currentRoomId,
      });
    }
  }

  function updateCallStatus(state) {
    if (callStatusEl) {
      const statusMap = {
        connected: "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ",
        connecting: "üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...",
        disconnected: "‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ",
        failed: "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
        closed: "üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ",
      };
      callStatusEl.textContent = statusMap[state] || state;
    }
  }

  function debugRoomUsers() {
    console.log("üîç DEBUG Room Users:");
    console.log(`Total in room: ${roomUsers.size}`);
    roomUsers.forEach((user, sessionId) => {
      console.log(
        `- ${user.userName} (${sessionId}) ${
          sessionId === mySessionId ? "(You)" : ""
        }`
      );
    });

    console.log("üîç DEBUG Peer Connections:");
    console.log(`Total peer connections: ${peerConnections.size}`);
    peerConnections.forEach((pc, sessionId) => {
      console.log(`- ${sessionId}: ${pc.connectionState}`);
    });

    console.log("üîç DEBUG Video Elements:");
    const videoContainers = document.querySelectorAll(".video-container");
    console.log(`Total video containers: ${videoContainers.length}`);
  }

  // –í—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
  // debugRoomUsers();

  function updateParticipantsCount(count) {
    participantsCount = count;
    if (participantsCountEl) {
      participantsCountEl.textContent = `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${count}`;
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ 2
      if (count > 2) {
        participantsCountEl.style.color = "#fbbf24";
        participantsCountEl.style.fontWeight = "bold";
      } else {
        participantsCountEl.style.color = "";
        participantsCountEl.style.fontWeight = "";
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üë• Participants count updated: ${count}`);
    debugRoomUsers();
  }

  // UI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–º
  function showVideoCallUI() {
    videoCallContainer.classList.remove("hidden");
    updateCallButtons();
    updateParticipantsCount(1);
  }

  function hideVideoCallUI() {
    videoCallContainer.classList.add("hidden");
  }

  function updateCallButtons() {
    if (startCallBtn) startCallBtn.disabled = isInCall;
    if (endCallBtn) endCallBtn.disabled = !isInCall;
  }

  function toggleVideo() {
    if (localStream) {
      const videoTrack = localStream.getVideoTracks()[0];
      if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled;
        toggleVideoBtn.textContent = videoTrack.enabled ? "üé•" : "‚ùåüé•";
        toggleVideoBtn.style.background = videoTrack.enabled ? "" : "#ff6b6b";
        showSystemMessage(
          videoTrack.enabled ? "‚úÖ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞" : "‚ùå –ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞"
        );
      }
    }
  }

  function toggleAudio() {
    if (localStream) {
      const audioTrack = localStream.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        toggleAudioBtn.textContent = audioTrack.enabled ? "üé§" : "‚ùåüé§";
        toggleAudioBtn.style.background = audioTrack.enabled ? "" : "#ff6b6b";
        showSystemMessage(
          audioTrack.enabled ? "‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω" : "‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω"
        );
      }
    }
  }

  function endCall() {
    console.log("üìû Ending call...");

    if (currentRoomId) {
      sendMessage({ type: "leave_room", roomId: currentRoomId });
      sendMessage({ type: "end_call", roomId: currentRoomId });
    }

    peerConnections.forEach((pc, sessionId) => {
      pc.close();
      removeVideoElement(sessionId);
    });

    peerConnections.clear();

    if (localStream) {
      localStream.getTracks().forEach((track) => track.stop());
      localStream = null;
    }

    currentRoomId = null;
    isInCall = false;
    isCallInitiator = false;
    roomUsers.clear();
    incomingCall = null;

    document
      .querySelectorAll(".video-container:not(#videoContainer_local)")
      .forEach((container) => {
        container.remove();
      });

    if (localVideo) {
      localVideo.srcObject = null;
    }

    hideVideoCallUI();
    hideIncomingCallModal();
    updateCallButtons();
    showSystemMessage("üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω");

    setTimeout(() => {
      if (isConnected) {
        sendMessage({ type: "get_active_calls" });
      }
    }, 1000);
  }

  function showBrowserNotification(title, body) {
    if ("Notification" in window && Notification.permission === "granted") {
      new Notification(title, {
        body: body,
        icon: "/favicon.ico",
      });
    }
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  window.downloadFile = function (filename, filetype, base64Data) {
    const link = document.createElement("a");
    link.href = `data:${filetype};base64,${base64Data}`;
    link.download = filename;
    link.click();
  };

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if ("Notification" in window && Notification.permission === "default") {
    Notification.requestPermission();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener("beforeunload", () => {
    if (ws) {
      ws.close(1000, "Page closed");
    }
    endCall();
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  setInterval(() => {
    if (!isInCall) return;

    peerConnections.forEach((pc, sessionId) => {
      const connectionTime = Date.now() - (pc.createdAt || Date.now());

      if (
        (pc.connectionState === "disconnected" ||
          pc.iceConnectionState === "disconnected") &&
        connectionTime > 10000
      ) {
        console.log(`üîÑ Auto-restarting stuck connection with ${sessionId}`);
        restartConnection(sessionId);
      }

      if (pc.connectionState === "connecting" && connectionTime > 15000) {
        console.log(`üîÑ Restarting stalled connection with ${sessionId}`);
        restartConnection(sessionId);
      }
    });
  }, 5000);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  window.addEventListener("DOMContentLoaded", () => {
    setVH();
    init();
  });
})();
